#!/bin/sh

SMF_DIR="/usr/local/etc/smf"
DATABASE_FILE="segw.database"

####
# Get the version of the node/smf tool, that is installed on the device
# if present, the following variables will be set:
# - complete_version: contains the complete versioning string, e.g. 0.8.3040
# - trimmed_version: contains the main version, e.g. 0.8
# If no such tool is installed, both variables will be empty
####
get_installed_versions()
{
    echo "[PRE-INSTALL] Getting already installed versions ..."
    complete_version=$(opkg list | grep 'smf\|node' | awk '{print $3}')
    trimmed_version=$(echo $complete_version | awk '{split($0,b,"."); printf "%d.%d", b[1], b[2]}')
    echo "[PRE-INSTALL] ... complete version: $complete_version"
    echo "[PRE-INSTALL] ... trimmed_version: $trimmed_version"
    return 0
}

####
# Before the installation a backup of the current installation is done.
# This process consists of the creation of an individual backup folder with the version tag
# of the installed version and the backup of the following files:
# - /usr/local/etc/segw_vX.X.cfg
# - /usr/local/etc/smf/segw_vX.X.json
# - /usr/local/etc/smf/segw.database
# - a human readbale and parsable database dump called database_dump.txt
####
create_backups()
{
    bkp_dir="${1}"
    mkdir -p "${bkp_dir}"

    echo "[PRE-INSTALL] Performing backups to ${bkp_dir} ..."

    # create database dumps first and then move the database here as well
    # For that we do not need to provide the configuration file, this works universally
    /usr/local/sbin/segw -C/usr/local/etc/segw_v${trimmed_version}.cfg -l > "${bkp_dir}/database_dump.txt"
    echo "[PRE-INSTALL] ... dumped database"

    # move the configuration files that will be regenerated during the installation
    mv ${SMF_DIR}/${DATABASE_FILE} "${bkp_dir}"
    echo "[PRE-INSTALL] ... moved database"


    # create backups of the json independently of the installed versions
    # old approach: use ls and grep to get the correct files
    #   config_files=$(ls ${SMF_DIR} | grep json | grep -v bkp)
    for config in "${SMF_DIR}"/*.json; do
        # just create a backup, it does not matter if there already is a backup we overwrite
        mv "${SMF_DIR}/${config}" "${bkp_dir}"
        echo "[PRE-INSTALL] ... moved ${config}"
	done 

    # create backups of the configurations independently of the installed versions
    # old approach: use ls and grep to get the correct files
    #   config_files=$(ls /usr/local/etc/ | grep cfg | grep -v bkp)
    for config in /usr/local/etc/*.cfg; do
        # just create a backup, it does not matter if there already is a backup we overwrite
        mv "/usr/local/etc/$config" "${bkp_dir}"
        echo "[PRE-INSTALL] ... moved ${config}"
    done 

    echo "[PRE-INSTALL] Backups done."
    return 0
}

####
# Main function that contains all the logic 
# and is the starting point of the whole script
####
main ()
{
    echo "                                   **                     "
    echo "                                   **                     "
    echo "   ****                             **    ***    ****     "
    echo "  * **** *    ***        ****        **    ***     ***  * "
    echo " **  ****    * ***      *  ***  *    **     ***     ****  "
    echo "****        *   ***    *    ****     **      **      **   "
    echo "  ***      **    ***  **     **      **      **      **   "
    echo "    ***    ********   **     **      **      **      **   "
    echo "      ***  *******    **     **      **      **      **   "
    echo " ****  **  **         **     **      **      **      *    "
    echo "* **** *   ****    *  **     **       ******* *******     "
    echo "   ****     *******    ********        *****   *****      "
    echo "             *****       *** ***                          "
    echo "                              ***                         "
    echo "                        ****   ***                        "
    echo "                      *******  **                         "
    echo "                     *     ****                           "
    echo ""
    echo ""
    echo " ######################################################## "
    echo " #            Performing Pre-Inst Steps ...             # "
    echo " ######################################################## "
    echo ""


    # see with which versions of the installed tools we are working
    get_installed_versions

    # stop running instances to move configurations
    # also a name change in the IPK will still produce the same segw-tool
    systemctl stop segw

    # anyways, backups shall be created before every installation anyways
    # only skip this, if no version at all is intalled at the moment
    if [ "$trimmed_version" != "" ]; then 
        backup_dir="$SMF_DIR/backups/$complete_version"
        create_backups $backup_dir
    fi

    echo "[PRE-INSTALL] Process complete. Continue with installation."
    return 0
}

# This is the only function call, all worflow and logic is done from within main function
main