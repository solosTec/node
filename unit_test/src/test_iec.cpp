#ifdef STAND_ALONE
#define BOOST_TEST_MODULE unit_test
#endif

#include <boost/test/unit_test.hpp>

#include <smf/iec/parser.h>

#include <cyng/io/ostream.h>

#include <fstream>
#include <iostream>

BOOST_AUTO_TEST_SUITE(iec_suite)

BOOST_AUTO_TEST_CASE(parser) {

    /// ELS5\@V9.30
    //F.F(00000000)
    // 0.0.0(03218421)
    // 0.9.1(124958)
    // 0.9.2(160608)
    // 1.7.0(0.000*kW)
    // 1.8.0(000000.000*kWh)
    // 1.8.1(000000.000*kWh)
    // 1.8.2(000000.000*kWh)
    // 1.8.3(000000.000*kWh)
    // 1.8.4(000000.000*kWh)
    // 2.7.0(0.000*kW)
    // 2.8.0(000000.000*kWh)
    // 3.8.0(000000.000*kvarh)
    // 4.8.0(000000.000*kvarh)
    // 0.2.2(00000001)
    // 0.2.0(FE63)
    // 1.4.0(04)(00.000*kW)
    // 2.4.0(04)(00.000*kW)
    // 3.4.0(04)(00.000*kvar)
    // 1.5.0(00.000*kW)
    // 2.5.0(00.000*kW)
    // 3.5.0(00.000*kvar)
    // 9.5.0(00.000*kVA)
    // 32.7.0(227.4*V)
    // 52.7.0(0.0*V)
    // 72.7.0(0.0*V)
    // 31.7.0(0.000*A)
    // 51.7.0(0.000*A)
    // 71.7.0(0.000*A)
    // 32.32.0(000000)
    // 32.36.0(000000)
    // 52.32.0(094035)
    // 52.36.0(000000)
    // 72.32.0(094035)
    // 72.36.0(000000)
    //!
    //^
    char const inp[] = {
        //  /ELS5\@V9.30
        0x2f, 0x45, 0x4c, 0x53, 0x35, 0x5c, 0x40, 0x56, 0x39, 0x2e, 0x33, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x0d, 0x0a,

        0x02,

        0x46, 0x2e, 0x46, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x30, 0x2e, 0x30, 0x2e, 0x30,
        0x28, 0x30, 0x33, 0x32, 0x31, 0x38, 0x34, 0x32, 0x31, 0x29, 0x0d, 0x0a,

        0x30, 0x2e, 0x39, 0x2e, 0x31, 0x28, 0x31, 0x32, 0x34, 0x39, 0x35, 0x38, 0x29, 0x0d, 0x0a, 0x30, 0x2e, 0x39, 0x2e, 0x32,
        0x28, 0x31, 0x36, 0x30, 0x36, 0x30, 0x38, 0x29, 0x0d, 0x0a,

        0x31, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a,

        0x31, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68,
        0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x31, 0x28,

        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38,
        0x2e, 0x32, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a,

        0x31, 0x2e, 0x38, 0x2e, 0x33, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68,
        0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x34, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,

        0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x32, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30,
        0x30, 0x30, 0x2a, 0x6b, 0x57,

        0x29, 0x0d, 0x0a, 0x32, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a,
        0x6b,

        0x57, 0x68, 0x29, 0x0d, 0x0a, 0x33, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30,

        0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x68, 0x29, 0x0d, 0x0a, 0x34, 0x2e, 0x38,
        0x2e,

        0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x68, 0x29, 0x0d,
        0x0a, 0x30, 0x2e, 0x32, 0x2e, 0x32, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x29, 0x0d, 0x0a,

        0x30, 0x2e, 0x32, 0x2e, 0x30, 0x28, 0x46, 0x45, 0x36, 0x33, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x34, 0x2e, 0x30, 0x28, 0x30,
        0x34, 0x29, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29,

        0x0d, 0x0a, 0x32, 0x2e, 0x34, 0x2e, 0x30, 0x28, 0x30, 0x34, 0x29, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b,
        0x57, 0x29, 0x0d, 0x0a, 0x33, 0x2e, 0x34, 0x2e, 0x30, 0x28, 0x30, 0x34, 0x29, 0x28, 0x30, 0x30, 0x2e, 0x30,

        0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30,
        0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a, 0x32, 0x2e,

        0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a, 0x33, 0x2e, 0x35, 0x2e,
        0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x29, 0x0d, 0x0a,

        0x39, 0x2e, 0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x56, 0x41, 0x29, 0x0d, 0x0a, 0x33,
        0x32, 0x2e, 0x37,

        0x2e, 0x30, 0x28, 0x32, 0x32, 0x37, 0x2e, 0x34, 0x2a, 0x56, 0x29, 0x0d, 0x0a, 0x35, 0x32, 0x2e, 0x37, 0x2e, 0x30, 0x28,
        0x30, 0x2e, 0x30, 0x2a, 0x56, 0x29, 0x0d, 0x0a,

        0x37, 0x32, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x2a, 0x56, 0x29, 0x0d, 0x0a, 0x33, 0x31, 0x2e, 0x37, 0x2e,
        0x30, 0x28, 0x30,

        0x2e, 0x30, 0x30, 0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x35, 0x31, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x30,
        0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x37, 0x31,

        0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x33, 0x32, 0x2e, 0x33, 0x32,
        0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d,

        0x0a, 0x33, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x35, 0x32,
        0x2e, 0x33, 0x32, 0x2e, 0x30, 0x28, 0x30, 0x39,

        0x34, 0x30, 0x33, 0x35, 0x29, 0x0d, 0x0a, 0x35, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x29, 0x0d, 0x0a, 0x37, 0x32, 0x2e, 0x33, 0x32, 0x2e, 0x30, 0x28, 0x30, 0x39,

        0x34, 0x30, 0x33, 0x35, 0x29, 0x0d, 0x0a, 0x37, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30, 0x30,

        0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x21, 0x0d, 0x0a, 0x03, 0x5e};

    smf::iec::parser p(
        [](cyng::obis code, std::string value, std::string unit) { std::cout << code << ": " << value << unit << std::endl; },
        [](std::string dev, bool crc) { std::cout << dev << ": " << (crc ? "ok" : "error") << std::endl; },
        1u);
    p.read(std::begin(inp), std::end(inp));
}

BOOST_AUTO_TEST_CASE(dbg35074715) {
    // /?35074715!
    char const inp[] = "/ELS5\\@V8.22\r\n"
                       "\x02"
                       // ""   0x02
                       "F.F(00000000)\r\n"
                       "F.F.1(00000000)\r\n"
                       "F.F.2(00000000)\r\n"
                       "0.0.0(35074715)\r\n"
                       "0.9.1(204153)\r\n" //  hhmmss
                       "0.9.2(210525)\r\n" //  yymmdd
                       "0.1.2*90(2105010000)\r\n"
                       "0.1.2*89(2104010000)\r\n"
                       "0.1.2*88(2103010000)\r\n"
                       "0.1.2*87(2102010000)\r\n"
                       "0.1.2*86(2101010000)\r\n"
                       "0.1.2*85(2012010000)\r\n"
                       "0.1.2*84(2011010000)\r\n"
                       "0.1.2*83(2010010000)\r\n"
                       "0.1.2*82(2009010000)\r\n"
                       "0.1.2*81(2008010000)\r\n"
                       "0.1.2*80(2007010000)\r\n"
                       "0.1.2*79(2006010000)\r\n"
                       "0.1.2*78(2005010000)\r\n"
                       "0.1.2*77(2004010000)\r\n"
                       "0.1.2*76(2003010000)\r\n"
                       "1.6.1(02.67*kW)(2105081945)\r\n" //  error
                       "1.6.1*90(02.79)(2104231930)\r\n"
                       "1.6.1*89(01.38)(2103291930)\r\n"
                       "1.6.1*88(01.46)(2102110900)\r\n"
                       "1.6.1*87(01.40)(2101011900)\r\n"
                       "1.6.1*86(01.46)(2012310915)\r\n"
                       "1.6.1*85(01.69)(2011130945)\r\n"
                       "1.6.1*84(01.52)(2010080815)\r\n"
                       "1.6.1*83(01.61)(2009022200)\r\n"
                       "1.6.1*82(02.30)(2008242045)\r\n"
                       "1.6.1*81(02.00)(2007130815)\r\n"
                       "1.6.1*80(01.59)(2006280830)\r\n"
                       "1.6.1*79(01.57)(2005200900)\r\n"
                       "1.6.1*78(01.37)(2004132015)\r\n"
                       "1.6.1*77(01.54)(2003040845)\r\n"
                       "1.6.1*76(01.38)(2002170900)\r\n"
                       "1.8.0(21928.09*kWh)\r\n"
                       "1.8.0*90(21712.75)\r\n"
                       "1.8.0*89(21481.40)\r\n"
                       "1.8.0*88(21289.70)\r\n"
                       "1.8.0*87(21121.86)\r\n"
                       "1.8.0*86(20927.29)\r\n"
                       "1.8.0*85(20727.72)\r\n"
                       "1.8.0*84(20528.92)\r\n"
                       "1.8.0*83(20314.60)\r\n"
                       "1.8.0*82(20099.47)\r\n"
                       "1.8.0*81(19824.28)\r\n"
                       "1.8.0*80(19566.27)\r\n"
                       "1.8.0*79(19345.95)\r\n"
                       "1.8.0*78(19088.27)\r\n"
                       "1.8.0*77(18870.01)\r\n"
                       "1.8.0*76(18658.49)\r\n"
                       "1.8.1(21928.09*kWh)\r\n"
                       "1.8.1*90(21712.75)\r\n"
                       "1.8.1*89(21481.40)\r\n"
                       "1.8.1*88(21289.70)\r\n"
                       "1.8.1*87(21121.86)\r\n"
                       "1.8.1*86(20927.29)\r\n"
                       "1.8.1*85(20727.72)\r\n"
                       "1.8.1*84(20528.92)\r\n"
                       "1.8.1*83(20314.60)\r\n"
                       "1.8.1*82(20099.47)\r\n"
                       "1.8.1*81(19824.28)\r\n"
                       "1.8.1*80(19566.27)\r\n"
                       "1.8.1*79(19345.95)\r\n"
                       "1.8.1*78(19088.27)\r\n"
                       "1.8.1*77(18870.01)\r\n"
                       "1.8.1*76(18658.49)\r\n"
                       "1.8.2(00000.00*kWh)\r\n"
                       "1.8.2*90(00000.00)\r\n"
                       "1.8.2*89(00000.00)\r\n"
                       "1.8.2*88(00000.00)\r\n"
                       "1.8.2*87(00000.00)\r\n"
                       "1.8.2*86(00000.00)\r\n"
                       "1.8.2*85(00000.00)\r\n"
                       "1.8.2*84(00000.00)\r\n"
                       "1.8.2*83(00000.00)\r\n"
                       "1.8.2*82(00000.00)\r\n"
                       "1.8.2*81(00000.00)\r\n"
                       "1.8.2*80(00000.00)\r\n"
                       "1.8.2*79(00000.00)\r\n"
                       "1.8.2*78(00000.00)\r\n"
                       "1.8.2*77(00000.00)\r\n"
                       "1.8.2*76(00000.00)\r\n"
                       "1.8.3(00000.00*kWh)\r\n"
                       "1.8.3*90(00000.00)\r\n"
                       "1.8.3*89(00000.00)\r\n"
                       "1.8.3*88(00000.00)\r\n"
                       "1.8.3*87(00000.00)\r\n"
                       "1.8.3*86(00000.00)\r\n"
                       "1.8.3*85(00000.00)\r\n"
                       "1.8.3*84(00000.00)\r\n"
                       "1.8.3*83(00000.00)\r\n"
                       "1.8.3*82(00000.00)\r\n"
                       "1.8.3*81(00000.00)\r\n"
                       "1.8.3*80(00000.00)\r\n"
                       "1.8.3*79(00000.00)\r\n"
                       "1.8.3*78(00000.00)\r\n"
                       "1.8.3*77(00000.00)\r\n"
                       "1.8.3*76(00000.00)\r\n"
                       "1.8.4(00000.00*kWh)\r\n"
                       "1.8.4*90(00000.00)\r\n"
                       "1.8.4*89(00000.00)\r\n"
                       "1.8.4*88(00000.00)\r\n"
                       "1.8.4*87(00000.00)\r\n"
                       "1.8.4*86(00000.00)\r\n"
                       "1.8.4*85(00000.00)\r\n"
                       "1.8.4*84(00000.00)\r\n"
                       "1.8.4*83(00000.00)\r\n"
                       "1.8.4*82(00000.00)\r\n"
                       "1.8.4*81(00000.00)\r\n"
                       "1.8.4*80(00000.00)\r\n"
                       "1.8.4*79(00000.00)\r\n"
                       "1.8.4*78(00000.00)\r\n"
                       "1.8.4*77(00000.00)\r\n"
                       "1.8.4*76(00000.00)\r\n"
                       "2.8.0(00000.00*kWh)\r\n"
                       "2.8.0*90(00000.00)\r\n"
                       "2.8.0*89(00000.00)\r\n"
                       "2.8.0*88(00000.00)\r\n"
                       "2.8.0*87(00000.00)\r\n"
                       "2.8.0*86(00000.00)\r\n"
                       "2.8.0*85(00000.00)\r\n"
                       "2.8.0*84(00000.00)\r\n"
                       "2.8.0*83(00000.00)\r\n"
                       "2.8.0*82(00000.00)\r\n"
                       "2.8.0*81(00000.00)\r\n"
                       "2.8.0*80(00000.00)\r\n"
                       "2.8.0*79(00000.00)\r\n"
                       "2.8.0*78(00000.00)\r\n"
                       "2.8.0*77(00000.00)\r\n"
                       "2.8.0*76(00000.00)\r\n"
                       "3.8.0(11366.07*kvarh)\r\n"
                       "3.8.0*90(11336.91)\r\n"
                       "3.8.0*89(11305.84)\r\n"
                       "3.8.0*88(11275.97)\r\n"
                       "3.8.0*87(11248.95)\r\n"
                       "3.8.0*86(11213.79)\r\n"
                       "3.8.0*85(11177.61)\r\n"
                       "3.8.0*84(11144.25)\r\n"
                       "3.8.0*83(11108.57)\r\n"
                       "3.8.0*82(11070.97)\r\n"
                       "3.8.0*81(10998.07)\r\n"
                       "3.8.0*80(10948.36)\r\n"
                       "3.8.0*79(10907.70)\r\n"
                       "3.8.0*78(10871.44)\r\n"
                       "3.8.0*77(10840.81)\r\n"
                       "3.8.0*76(10806.27)\r\n"
                       "4.8.0(00017.86*kvarh)\r\n"
                       "4.8.0*90(00017.83)\r\n"
                       "4.8.0*89(00017.81)\r\n"
                       "4.8.0*88(00017.71)\r\n"
                       "4.8.0*87(00017.65)\r\n"
                       "4.8.0*86(00017.48)\r\n"
                       "4.8.0*85(00017.31)\r\n"
                       "4.8.0*84(00017.25)\r\n"
                       "4.8.0*83(00017.17)\r\n"
                       "4.8.0*82(00017.14)\r\n"
                       "4.8.0*81(00017.09)\r\n"
                       "4.8.0*80(00017.08)\r\n"
                       "4.8.0*79(00017.00)\r\n"
                       "4.8.0*78(00016.86)\r\n"
                       "4.8.0*77(00016.28)\r\n"
                       "4.8.0*76(00015.54)\r\n"
                       "9.8.0(26127.26*kVAh)\r\n"
                       "9.8.0*90(25901.30)\r\n"
                       "9.8.0*89(25657.69)\r\n"
                       "9.8.0*88(25453.67)\r\n"
                       "9.8.0*87(25274.95)\r\n"
                       "9.8.0*86(25067.17)\r\n"
                       "9.8.0*85(24854.08)\r\n"
                       "9.8.0*84(24643.49)\r\n"
                       "9.8.0*83(24416.81)\r\n"
                       "9.8.0*82(24188.52)\r\n"
                       "9.8.0*81(23894.44)\r\n"
                       "9.8.0*80(23619.47)\r\n"
                       "9.8.0*79(23383.96)\r\n"
                       "9.8.0*78(23112.31)\r\n"
                       "9.8.0*77(22882.40)\r\n"
                       "9.8.0*76(22658.67)\r\n"
                       "10.8.0(00000.04*kVAh)\r\n"
                       "10.8*90(00000.04)\r\n"
                       "10.8*89(00000.04)\r\n"
                       "10.8*88(00000.04)\r\n"
                       "10.8*87(00000.04)\r\n"
                       "10.8*86(00000.04)\r\n"
                       "10.8*85(00000.04)\r\n"
                       "10.8*84(00000.04)\r\n"
                       "10.8*83(00000.04)\r\n"
                       "10.8*82(00000.04)\r\n"
                       "10.8*81(00000.04)\r\n"
                       "10.8*80(00000.04)\r\n"
                       "10.8*79(00000.04)\r\n"
                       "10.8*78(00000.04)\r\n"
                       "10.8*77(00000.04)\r\n"
                       "10.8*76(00000.04)\r\n"
                       "1.7.0(0.257*kW)\r\n"
                       "2.7.0(0.000*kW)\r\n"
                       "C.3.0(00010000)\r\n"
                       "!\r\n"
                       "\x03"
                       "\x5e"
        //  "M"
        ;

    smf::iec::parser p(
        [](cyng::obis code, std::string value, std::string unit) {
            std::cout << code << ": " << value << ' ' << unit << std::endl;
        },
        [](std::string dev, bool crc) { std::cout << dev << ": " << (crc ? "ok" : "error") << std::endl; },
        1u);
    p.read(std::begin(inp), std::end(inp));
}

BOOST_AUTO_TEST_CASE(dbg35074664) {
    //?35074664!

    char const inp[] = "/ELS5\\@V8.22\r\n"
                       "\x02"
                       //
                       "F.F(00000000)\r\n"
                       "F.F.1(00000000)\r\n"
                       "F.F.2(00000000)\r\n"
                       "0.0.0(35074664)\r\n"
                       "0.9.1(222751)\r\n"
                       "0.9.2(210526)\r\n"
                       "0.1.2*90(2105010000)\r\n"
                       "0.1.2*89(2104010000)\r\n"
                       "0.1.2*88(2103010000)\r\n"
                       "0.1.2*87(2102010000)\r\n"
                       "0.1.2*86(2101010000)\r\n"
                       "0.1.2*85(2012010000)\r\n"
                       "0.1.2*84(2011010000)\r\n"
                       "0.1.2*83(2010010000)\r\n"
                       "0.1.2*82(2009010000)\r\n"
                       "0.1.2*81(2008010000)\r\n"
                       "0.1.2*80(2007010000)\r\n"
                       "0.1.2*79(2006010000)\r\n"
                       "0.1.2*78(2005010000)\r\n"
                       "0.1.2*77(2004010000)\r\n"
                       "0.1.2*76(2003010000)\r\n"
                       "1.6.1(00.56*kW)(2105232245)\r\n"
                       "1.6.1*90(00.70)(2104211945)\r\n"
                       "1.6.1*89(00.57)(2103072215)\r\n"
                       "1.6.1*88(00.55)(2102252315)\r\n"
                       "1.6.1*87(00.46)(2101121315)\r\n"
                       "1.6.1*86(00.45)(2012201430)\r\n"
                       "1.6.1*85(00.50)(2011012145)\r\n"
                       "1.6.1*84(00.66)(2010032245)\r\n"
                       "1.6.1*83(00.75)(2009291745)\r\n"
                       "1.6.1*82(00.53)(2008220115)\r\n"
                       "1.6.1*81(00.49)(2007192315)\r\n"
                       "1.6.1*80(00.59)(2006280030)\r\n"
                       "1.6.1*79(00.55)(2005020245)\r\n"
                       "1.6.1*78(00.63)(2004250030)\r\n"
                       "1.6.1*77(00.57)(2003141100)\r\n"
                       "1.6.1*76(00.48)(2002012300)\r\n"
                       "1.8.0(09754.59*kWh)\r\n"
                       "1.8.0*90(09637.44)\r\n"
                       "1.8.0*89(09517.25)\r\n"
                       "1.8.0*88(09415.04)\r\n"
                       "1.8.0*87(09319.35)\r\n"
                       "1.8.0*86(09217.88)\r\n"
                       "1.8.0*85(09116.14)\r\n"
                       "1.8.0*84(09007.18)\r\n"
                       "1.8.0*83(08891.84)\r\n"
                       "1.8.0*82(08768.92)\r\n"
                       "1.8.0*81(08633.63)\r\n"
                       "1.8.0*80(08503.05)\r\n"
                       "1.8.0*79(08378.35)\r\n"
                       "1.8.0*78(08242.34)\r\n"
                       "1.8.0*77(08105.60)\r\n"
                       "1.8.0*76(07984.76)\r\n"
                       "1.8.1(09754.59*kWh)\r\n"
                       "1.8.1*90(09637.44)\r\n"
                       "1.8.1*89(09517.25)\r\n"
                       "1.8.1*88(09415.04)\r\n"
                       "1.8.1*87(09319.35)\r\n"
                       "1.8.1*86(09217.88)\r\n"
                       "1.8.1*85(09116.14)\r\n"
                       "1.8.1*84(09007.18)\r\n"
                       "1.8.1*83(08891.84)\r\n"
                       "1.8.1*82(08768.92)\r\n"
                       "1.8.1*81(08633.63)\r\n"
                       "1.8.1*80(08503.05)\r\n"
                       "1.8.1*79(08378.35)\r\n"
                       "1.8.1*78(08242.34)\r\n"
                       "1.8.1*77(08105.60)\r\n"
                       "1.8.1*76(07984.76)\r\n"
                       "1.8.2(00000.00*kWh)\r\n"
                       "1.8.2*90(00000.00)\r\n"
                       "1.8.2*89(00000.00)\r\n"
                       "1.8.2*88(00000.00)\r\n"
                       "1.8.2*87(00000.00)\r\n"
                       "1.8.2*86(00000.00)\r\n"
                       "1.8.2*85(00000.00)\r\n"
                       "1.8.2*84(00000.00)\r\n"
                       "1.8.2*83(00000.00)\r\n"
                       "1.8.2*82(00000.00)\r\n"
                       "1.8.2*81(00000.00)\r\n"
                       "1.8.2*80(00000.00)\r\n"
                       "1.8.2*79(00000.00)\r\n"
                       "1.8.2*78(00000.00)\r\n"
                       "1.8.2*77(00000.00)\r\n"
                       "1.8.2*76(00000.00)\r\n"
                       "1.8.3(00000.00*kWh)\r\n"
                       "1.8.3*90(00000.00)\r\n"
                       "1.8.3*89(00000.00)\r\n"
                       "1.8.3*88(00000.00)\r\n"
                       "1.8.3*87(00000.00)\r\n"
                       "1.8.3*86(00000.00)\r\n"
                       "1.8.3*85(00000.00)\r\n"
                       "1.8.3*84(00000.00)\r\n"
                       "1.8.3*83(00000.00)\r\n"
                       "1.8.3*82(00000.00)\r\n"
                       "1.8.3*81(00000.00)\r\n"
                       "1.8.3*80(00000.00)\r\n"
                       "1.8.3*79(00000.00)\r\n"
                       "1.8.3*78(00000.00)\r\n"
                       "1.8.3*77(00000.00)\r\n"
                       "1.8.3*76(00000.00)\r\n"
                       "1.8.4(00000.00*kWh)\r\n"
                       "1.8.4*90(00000.00)\r\n"
                       "1.8.4*89(00000.00)\r\n"
                       "1.8.4*88(00000.00)\r\n"
                       "1.8.4*87(00000.00)\r\n"
                       "1.8.4*86(00000.00)\r\n"
                       "1.8.4*85(00000.00)\r\n"
                       "1.8.4*84(00000.00)\r\n"
                       "1.8.4*83(00000.00)\r\n"
                       "1.8.4*82(00000.00)\r\n"
                       "1.8.4*81(00000.00)\r\n"
                       "1.8.4*80(00000.00)\r\n"
                       "1.8.4*79(00000.00)\r\n"
                       "1.8.4*78(00000.00)\r\n"
                       "1.8.4*77(00000.00)\r\n"
                       "1.8.4*76(00000.00)\r\n"
                       "2.8.0(00000.00*kWh)\r\n"
                       "2.8.0*90(00000.00)\r\n"
                       "2.8.0*89(00000.00)\r\n"
                       "2.8.0*88(00000.00)\r\n"
                       "2.8.0*87(00000.00)\r\n"
                       "2.8.0*86(00000.00)\r\n"
                       "2.8.0*85(00000.00)\r\n"
                       "2.8.0*84(00000.00)\r\n"
                       "2.8.0*83(00000.00)\r\n"
                       "2.8.0*82(00000.00)\r\n"
                       "2.8.0*81(00000.00)\r\n"
                       "2.8.0*80(00000.00)\r\n"
                       "2.8.0*79(00000.00)\r\n"
                       "2.8.0*78(00000.00)\r\n"
                       "2.8.0*77(00000.00)\r\n"
                       "2.8.0*76(00000.00)\r\n"
                       "3.8.0(05964.40*kvarh)\r\n"
                       "3.8.0*90(05893.14)\r\n"
                       "3.8.0*89(05822.21)\r\n"
                       "3.8.0*88(05771.45)\r\n"
                       "3.8.0*87(05726.28)\r\n"
                       "3.8.0*86(05678.11)\r\n"
                       "3.8.0*85(05624.10)\r\n"
                       "3.8.0*84(05565.61)\r\n"
                       "3.8.0*83(05503.96)\r\n"
                       "3.8.0*82(05436.78)\r\n"
                       "3.8.0*81(05355.63)\r\n"
                       "3.8.0*80(05274.26)\r\n"
                       "3.8.0*79(05194.44)\r\n"
                       "3.8.0*78(05112.32)\r\n"
                       "3.8.0*77(05033.27)\r\n"
                       "3.8.0*76(04959.40)\r\n"
                       "4.8.0(00008.27*kvarh)\r\n"
                       "4.8.0*90(00008.26)\r\n"
                       "4.8.0*89(00008.25)\r\n"
                       "4.8.0*88(00008.24)\r\n"
                       "4.8.0*87(00008.24)\r\n"
                       "4.8.0*86(00008.22)\r\n"
                       "4.8.0*85(00008.19)\r\n"
                       "4.8.0*84(00008.16)\r\n"
                       "4.8.0*83(00008.14)\r\n"
                       "4.8.0*82(00008.13)\r\n"
                       "4.8.0*81(00008.11)\r\n"
                       "4.8.0*80(00008.09)\r\n"
                       "4.8.0*79(00008.08)\r\n"
                       "4.8.0*78(00008.07)\r\n"
                       "4.8.0*77(00008.05)\r\n"
                       "4.8.0*76(00007.82)\r\n"
                       "9.8.0(12009.06*kVAh)\r\n"
                       "9.8.0*90(11867.71)\r\n"
                       "9.8.0*89(11722.93)\r\n"
                       "9.8.0*88(11602.88)\r\n"
                       "9.8.0*87(11491.62)\r\n"
                       "9.8.0*86(11372.36)\r\n"
                       "9.8.0*85(11250.41)\r\n"
                       "9.8.0*84(11120.44)\r\n"
                       "9.8.0*83(10983.98)\r\n"
                       "9.8.0*82(10839.08)\r\n"
                       "9.8.0*81(10676.62)\r\n"
                       "9.8.0*80(10518.41)\r\n"
                       "9.8.0*79(10365.24)\r\n"
                       "9.8.0*78(10201.06)\r\n"
                       "9.8.0*77(10036.51)\r\n"
                       "9.8.0*76(09888.20)\r\n"
                       "10.8.0(00000.08*kVAh)\r\n"
                       "10.8*90(00000.08)\r\n"
                       "10.8*89(00000.08)\r\n"
                       "10.8*88(00000.08)\r\n"
                       "10.8*87(00000.08)\r\n"
                       "10.8*86(00000.08)\r\n"
                       "10.8*85(00000.08)\r\n"
                       "10.8*84(00000.07)\r\n"
                       "10.8*83(00000.07)\r\n"
                       "10.8*82(00000.07)\r\n"
                       "10.8*81(00000.07)\r\n"
                       "10.8*80(00000.07)\r\n"
                       "10.8*79(00000.07)\r\n"
                       "10.8*78(00000.07)\r\n"
                       "10.8*77(00000.07)\r\n"
                       "10.8*76(00000.07)\r\n"
                       "1.7.0(0.304*kW)\r\n"
                       "2.7.0(0.000*kW)\r\n"
                       "C.3.0(00010000)\r\n"
                       "!\r\n"
                       "\x03"
                       "\x5e"
        //  "M"
        ;

    smf::iec::parser p(
        [](cyng::obis code, std::string value, std::string unit) { std::cout << code << ": " << value << unit << std::endl; },
        [](std::string dev, bool crc) { std::cout << dev << ": " << (crc ? "ok" : "error") << std::endl; },
        1u);
    p.read(std::begin(inp), std::end(inp));
}

BOOST_AUTO_TEST_CASE(dbg35074645) {
    // /?35074645!

    char const inp[] = "/ELS5\\@V8.22\r\n"
                       "\x02"
                       //
                       "F.F(00000000)\r\n"
                       "F.F.1(00000000)\r\n"
                       "F.F.2(00000000)\r\n"
                       "0.0.0(35074645)\r\n"
                       "0.9.1(223619)\r\n"
                       "0.9.2(210526)\r\n"
                       "0.1.2*90(2105010000)\r\n"
                       "0.1.2*89(2104010000)\r\n"
                       "0.1.2*88(2103010000)\r\n"
                       "0.1.2*87(2102010000)\r\n"
                       "0.1.2*86(2101010000)\r\n"
                       "0.1.2*85(2012010000)\r\n"
                       "0.1.2*84(2011010000)\r\n"
                       "0.1.2*83(2010010000)\r\n"
                       "0.1.2*82(2009010000)\r\n"
                       "0.1.2*81(2008010000)\r\n"
                       "0.1.2*80(2007010000)\r\n"
                       "0.1.2*79(2006010000)\r\n"
                       "0.1.2*78(2005010000)\r\n"
                       "0.1.2*77(2004010000)\r\n"
                       "0.1.2*76(2003010000)\r\n"
                       "1.6.1(03.42*kW)(2105131500)\r\n"
                       "1.6.1*90(03.22)(2104302045)\r\n"
                       "1.6.1*89(02.99)(2103120045)\r\n"
                       "1.6.1*88(03.02)(2102112200)\r\n"
                       "1.6.1*87(02.96)(2101252300)\r\n"
                       "1.6.1*86(02.79)(2012260045)\r\n"
                       "1.6.1*85(02.13)(2011171930)\r\n"
                       "1.6.1*84(02.18)(2010041600)\r\n"
                       "1.6.1*83(02.10)(2009261730)\r\n"
                       "1.6.1*82(01.47)(2008140715)\r\n"
                       "1.6.1*81(02.12)(2007111700)\r\n"
                       "1.6.1*80(01.79)(2006181830)\r\n"
                       "1.6.1*79(02.98)(2005032015)\r\n"
                       "1.6.1*78(02.54)(2004081530)\r\n"
                       "1.6.1*77(03.07)(2003281415)\r\n"
                       "1.6.1*76(02.86)(2002221900)\r\n"
                       "1.8.0(12531.41*kWh)\r\n"
                       "1.8.0*90(12406.28)\r\n"
                       "1.8.0*89(12257.33)\r\n"
                       "1.8.0*88(12108.87)\r\n"
                       "1.8.0*87(11955.66)\r\n"
                       "1.8.0*86(11727.50)\r\n"
                       "1.8.0*85(11539.45)\r\n"
                       "1.8.0*84(11375.98)\r\n"
                       "1.8.0*83(11232.34)\r\n"
                       "1.8.0*82(11106.12)\r\n"
                       "1.8.0*81(11005.16)\r\n"
                       "1.8.0*80(10878.49)\r\n"
                       "1.8.0*79(10735.68)\r\n"
                       "1.8.0*78(10500.52)\r\n"
                       "1.8.0*77(10259.31)\r\n"
                       "1.8.0*76(10038.23)\r\n"
                       "1.8.1(12531.41*kWh)\r\n"
                       "1.8.1*90(12406.28)\r\n"
                       "1.8.1*89(12257.33)\r\n"
                       "1.8.1*88(12108.87)\r\n"
                       "1.8.1*87(11955.66)\r\n"
                       "1.8.1*86(11727.50)\r\n"
                       "1.8.1*85(11539.45)\r\n"
                       "1.8.1*84(11375.98)\r\n"
                       "1.8.1*83(11232.34)\r\n"
                       "1.8.1*82(11106.12)\r\n"
                       "1.8.1*81(11005.16)\r\n"
                       "1.8.1*80(10878.49)\r\n"
                       "1.8.1*79(10735.68)\r\n"
                       "1.8.1*78(10500.52)\r\n"
                       "1.8.1*77(10259.31)\r\n"
                       "1.8.1*76(10038.23)\r\n"
                       "1.8.2(00000.00*kWh)\r\n"
                       "1.8.2*90(00000.00)\r\n"
                       "1.8.2*89(00000.00)\r\n"
                       "1.8.2*88(00000.00)\r\n"
                       "1.8.2*87(00000.00)\r\n"
                       "1.8.2*86(00000.00)\r\n"
                       "1.8.2*85(00000.00)\r\n"
                       "1.8.2*84(00000.00)\r\n"
                       "1.8.2*83(00000.00)\r\n"
                       "1.8.2*82(00000.00)\r\n"
                       "1.8.2*81(00000.00)\r\n"
                       "1.8.2*80(00000.00)\r\n"
                       "1.8.2*79(00000.00)\r\n"
                       "1.8.2*78(00000.00)\r\n"
                       "1.8.2*77(00000.00)\r\n"
                       "1.8.2*76(00000.00)\r\n"
                       "1.8.3(00000.00*kWh)\r\n"
                       "1.8.3*90(00000.00)\r\n"
                       "1.8.3*89(00000.00)\r\n"
                       "1.8.3*88(00000.00)\r\n"
                       "1.8.3*87(00000.00)\r\n"
                       "1.8.3*86(00000.00)\r\n"
                       "1.8.3*85(00000.00)\r\n"
                       "1.8.3*84(00000.00)\r\n"
                       "1.8.3*83(00000.00)\r\n"
                       "1.8.3*82(00000.00)\r\n"
                       "1.8.3*81(00000.00)\r\n"
                       "1.8.3*80(00000.00)\r\n"
                       "1.8.3*79(00000.00)\r\n"
                       "1.8.3*78(00000.00)\r\n"
                       "1.8.3*77(00000.00)\r\n"
                       "1.8.3*76(00000.00)\r\n"
                       "1.8.4(00000.00*kWh)\r\n"
                       "1.8.4*90(00000.00)\r\n"
                       "1.8.4*89(00000.00)\r\n"
                       "1.8.4*88(00000.00)\r\n"
                       "1.8.4*87(00000.00)\r\n"
                       "1.8.4*86(00000.00)\r\n"
                       "1.8.4*85(00000.00)\r\n"
                       "1.8.4*84(00000.00)\r\n"
                       "1.8.4*83(00000.00)\r\n"
                       "1.8.4*82(00000.00)\r\n"
                       "1.8.4*81(00000.00)\r\n"
                       "1.8.4*80(00000.00)\r\n"
                       "1.8.4*79(00000.00)\r\n"
                       "1.8.4*78(00000.00)\r\n"
                       "1.8.4*77(00000.00)\r\n"
                       "1.8.4*76(00000.00)\r\n"
                       "2.8.0(00000.00*kWh)\r\n"
                       "2.8.0*90(00000.00)\r\n"
                       "2.8.0*89(00000.00)\r\n"
                       "2.8.0*88(00000.00)\r\n"
                       "2.8.0*87(00000.00)\r\n"
                       "2.8.0*86(00000.00)\r\n"
                       "2.8.0*85(00000.00)\r\n"
                       "2.8.0*84(00000.00)\r\n"
                       "2.8.0*83(00000.00)\r\n"
                       "2.8.0*82(00000.00)\r\n"
                       "2.8.0*81(00000.00)\r\n"
                       "2.8.0*80(00000.00)\r\n"
                       "2.8.0*79(00000.00)\r\n"
                       "2.8.0*78(00000.00)\r\n"
                       "2.8.0*77(00000.00)\r\n"
                       "2.8.0*76(00000.00)\r\n"
                       "3.8.0(00118.66*kvarh)\r\n"
                       "3.8.0*90(00118.13)\r\n"
                       "3.8.0*89(00117.54)\r\n"
                       "3.8.0*88(00116.89)\r\n"
                       "3.8.0*87(00116.12)\r\n"
                       "3.8.0*86(00115.53)\r\n"
                       "3.8.0*85(00115.08)\r\n"
                       "3.8.0*84(00114.72)\r\n"
                       "3.8.0*83(00114.27)\r\n"
                       "3.8.0*82(00114.03)\r\n"
                       "3.8.0*81(00113.79)\r\n"
                       "3.8.0*80(00113.37)\r\n"
                       "3.8.0*79(00112.87)\r\n"
                       "3.8.0*78(00112.57)\r\n"
                       "3.8.0*77(00112.32)\r\n"
                       "3.8.0*76(00111.93)\r\n"
                       "4.8.0(00490.70*kvarh)\r\n"
                       "4.8.0*90(00483.21)\r\n"
                       "4.8.0*89(00480.32)\r\n"
                       "4.8.0*88(00477.90)\r\n"
                       "4.8.0*87(00475.83)\r\n"
                       "4.8.0*86(00472.30)\r\n"
                       "4.8.0*85(00469.08)\r\n"
                       "4.8.0*84(00466.05)\r\n"
                       "4.8.0*83(00462.94)\r\n"
                       "4.8.0*82(00460.38)\r\n"
                       "4.8.0*81(00455.82)\r\n"
                       "4.8.0*80(00453.75)\r\n"
                       "4.8.0*79(00450.40)\r\n"
                       "4.8.0*78(00443.93)\r\n"
                       "4.8.0*77(00437.33)\r\n"
                       "4.8.0*76(00433.54)\r\n"
                       "9.8.0(12705.42*kVAh)\r\n"
                       "9.8.0*90(12577.99)\r\n"
                       "9.8.0*89(12428.19)\r\n"
                       "9.8.0*88(12279.16)\r\n"
                       "9.8.0*87(12125.36)\r\n"
                       "9.8.0*86(11896.66)\r\n"
                       "9.8.0*85(11708.06)\r\n"
                       "9.8.0*84(11544.02)\r\n"
                       "9.8.0*83(11399.69)\r\n"
                       "9.8.0*82(11272.98)\r\n"
                       "9.8.0*81(11170.40)\r\n"
                       "9.8.0*80(11043.26)\r\n"
                       "9.8.0*79(10899.76)\r\n"
                       "9.8.0*78(10663.55)\r\n"
                       "9.8.0*77(10421.27)\r\n"
                       "9.8.0*76(10199.48)\r\n"
                       "10.8.0(00000.08*kVAh)\r\n"
                       "10.8*90(00000.08)\r\n"
                       "10.8*89(00000.08)\r\n"
                       "10.8*88(00000.08)\r\n"
                       "10.8*87(00000.08)\r\n"
                       "10.8*86(00000.07)\r\n"
                       "10.8*85(00000.07)\r\n"
                       "10.8*84(00000.07)\r\n"
                       "10.8*83(00000.07)\r\n"
                       "10.8*82(00000.07)\r\n"
                       "10.8*81(00000.07)\r\n"
                       "10.8*80(00000.07)\r\n"
                       "10.8*79(00000.07)\r\n"
                       "10.8*78(00000.07)\r\n"
                       "10.8*77(00000.07)\r\n"
                       "10.8*76(00000.07)\r\n"
                       "1.7.0(0.197*kW)\r\n"
                       "2.7.0(0.000*kW)\r\n"
                       "C.3.0(00010000)\r\n"
                       "!\r\n"
                       "\x03"
                       "\x5e"
        //G;
        ;

    smf::iec::parser p(
        [](cyng::obis code, std::string value, std::string unit) { std::cout << code << ": " << value << unit << std::endl; },
        [](std::string dev, bool crc) { std::cout << dev << ": " << (crc ? "ok" : "error") << std::endl; },
        1u);
    p.read(std::begin(inp), std::end(inp));
}

BOOST_AUTO_TEST_CASE(convert) {
    //
    //	convert EDIS => OBIS code
    //
    std::ifstream ifile("..\\..\\unit_test\\assets\\iec.log");
    BOOST_CHECK(ifile.is_open());
    if (ifile.is_open()) {
        //
        //	read line by line
        //
        std::string line;
        while (std::getline(ifile, line)) {
            std::cout << line;
            auto const r = smf::iec::split_line(line);
            if (r.size() == 2) {
                // convert(r.at(0), r.at(1));
                auto const code = smf::iec::to_obis(r.at(0), 1);
                std::cout << " => " << cyng::to_string(code) << ": " << r.at(1) << std::endl;

            } else if (r.size() == 3) {
                // convert(r.at(0), r.at(1), r.at(2));
                auto const code = smf::iec::to_obis(r.at(0), 1);
                std::cout << " => " << cyng::to_string(code) << ": " << r.at(1) << ", " << r.at(2) << std::endl;
            } else {
                std::cout << "ERROR" << std::endl;
            }
        }
    }
}

BOOST_AUTO_TEST_SUITE_END()
