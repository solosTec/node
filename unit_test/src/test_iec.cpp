#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE unit_test
#endif

#include <boost/test/unit_test.hpp>

#include <smf/iec/parser.h>

#include <cyng/io/ostream.h>

#include <iostream>
#include <fstream>


BOOST_AUTO_TEST_SUITE(iec_suite)

BOOST_AUTO_TEST_CASE(parser)
{
	char const inp[] = {
		0x2f, 0x45,

		0x4c, 0x53, 0x35, 0x5c, 0x40, 0x56, 0x39, 0x2e, 0x33, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x0d, 0x0a,

		0x02,

		0x46, 0x2e, 0x46, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x30,
		0x2e, 0x30, 0x2e, 0x30, 0x28, 0x30, 0x33, 0x32, 0x31, 0x38, 0x34, 0x32, 0x31, 0x29, 0x0d, 0x0a,


		0x30, 0x2e, 0x39, 0x2e, 0x31, 0x28, 0x31, 0x32, 0x34, 0x39, 0x35, 0x38, 0x29, 0x0d, 0x0a, 0x30,
		0x2e, 0x39, 0x2e, 0x32, 0x28, 0x31, 0x36, 0x30, 0x36, 0x30, 0x38, 0x29, 0x0d, 0x0a,

		0x31, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d,
		0x0a,

		0x31, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30,
		0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x31, 0x28,

		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d,
		0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x32, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30,
		0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a,

		0x31, 0x2e, 0x38, 0x2e, 0x33, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30,
		0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x34, 0x28, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30,

		0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x32, 0x2e, 0x37, 0x2e, 0x30,
		0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57,

		0x29, 0x0d, 0x0a, 0x32, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e,
		0x30, 0x30, 0x30, 0x2a, 0x6b,

		0x57, 0x68, 0x29, 0x0d, 0x0a, 0x33, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x30,

		0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x68, 0x29, 0x0d,
		0x0a, 0x34, 0x2e, 0x38, 0x2e,

		0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61,
		0x72, 0x68, 0x29, 0x0d, 0x0a, 0x30, 0x2e, 0x32, 0x2e, 0x32, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x31, 0x29, 0x0d, 0x0a,

		0x30, 0x2e, 0x32, 0x2e, 0x30, 0x28, 0x46, 0x45, 0x36, 0x33, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x34,
		0x2e, 0x30, 0x28, 0x30, 0x34, 0x29, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57,
		0x29,

		0x0d, 0x0a, 0x32, 0x2e, 0x34, 0x2e, 0x30, 0x28, 0x30, 0x34, 0x29, 0x28, 0x30, 0x30, 0x2e, 0x30,
		0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a, 0x33, 0x2e, 0x34, 0x2e, 0x30, 0x28, 0x30, 0x34,
		0x29, 0x28, 0x30, 0x30, 0x2e, 0x30,

		0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61, 0x72, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x35, 0x2e, 0x30, 0x28,
		0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a, 0x32, 0x2e,

		0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x57, 0x29, 0x0d, 0x0a,
		0x33, 0x2e, 0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x76, 0x61,
		0x72, 0x29, 0x0d, 0x0a,

		0x39, 0x2e, 0x35, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x6b, 0x56, 0x41,
		0x29, 0x0d, 0x0a, 0x33, 0x32, 0x2e, 0x37,

		0x2e, 0x30, 0x28, 0x32, 0x32, 0x37, 0x2e, 0x34, 0x2a, 0x56, 0x29, 0x0d, 0x0a, 0x35, 0x32, 0x2e,
		0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x2a, 0x56, 0x29, 0x0d, 0x0a,

		0x37, 0x32, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x2a, 0x56, 0x29, 0x0d, 0x0a, 0x33,
		0x31, 0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30,

		0x2e, 0x30, 0x30, 0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x35, 0x31, 0x2e, 0x37, 0x2e, 0x30, 0x28,
		0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x37, 0x31,

		0x2e, 0x37, 0x2e, 0x30, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x2a, 0x41, 0x29, 0x0d, 0x0a, 0x33,
		0x32, 0x2e, 0x33, 0x32, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d,

		0x0a, 0x33, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29,
		0x0d, 0x0a, 0x35, 0x32, 0x2e, 0x33, 0x32, 0x2e, 0x30, 0x28, 0x30, 0x39,

		0x34, 0x30, 0x33, 0x35, 0x29, 0x0d, 0x0a, 0x35, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x37, 0x32, 0x2e, 0x33, 0x32, 0x2e, 0x30, 0x28,
		0x30, 0x39,

		0x34, 0x30, 0x33, 0x35, 0x29, 0x0d, 0x0a, 0x37, 0x32, 0x2e, 0x33, 0x36, 0x2e, 0x30, 0x28, 0x30,
		0x30,

		0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x21, 0x0d, 0x0a, 0x03, 0x5e
	};


	smf::iec::parser p([](cyng::obis code, std::string value, std::string unit) {
		std::cout << code << ": " << value << unit << std::endl;
		}, [](std::string dev, bool crc) {
			std::cout << dev << ": " << ( crc ? "ok" : "error" ) << std::endl;
		}, 1u);
	p.read(std::begin(inp), std::end(inp));
}

BOOST_AUTO_TEST_CASE(convert)
{
	//
	//	convert EDIS => OBIS code
	//
	std::ifstream ifile("..\\..\\unit_test\\assets\\iec.log");
	BOOST_CHECK(ifile.is_open());
	if (ifile.is_open())
	{
		//
		//	read line by line
		//
		std::string line;
		while (std::getline(ifile, line)) {
			std::cout << line;
			auto const r = smf::iec::split_line(line);
			if (r.size() == 2) {
				//convert(r.at(0), r.at(1));
				auto const code = smf::iec::to_obis(r.at(0), 1);
				std::cout << " => " << cyng::to_str(code) << ": " << r.at(1) << std::endl;

			}
			else if (r.size() == 3) {
				//convert(r.at(0), r.at(1), r.at(2));
				auto const code = smf::iec::to_obis(r.at(0), 1);
				std::cout << " => " << cyng::to_str(code) << ": " << r.at(1) << ", " << r.at(2) << std::endl;
			}
			else {
				std::cout << "ERROR" << std::endl;
			}

		}

	}
}

BOOST_AUTO_TEST_SUITE_END()